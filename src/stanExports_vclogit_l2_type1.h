// Generated by rstantools.  Do not edit by hand.

/*
    voteswitchR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    voteswitchR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with voteswitchR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_vclogit_l2_type1_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_vclogit_l2_type1");
    reader.add_event(108, 106, "end", "model_vclogit_l2_type1");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
scale_r_cor(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& z,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& SD,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(multiply(diag_pre_multiply(SD, L), z)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct scale_r_cor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& z,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& SD,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& L, std::ostream* pstream__) const {
        return scale_r_cor(z, SD, L, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_vclogit_l2_type1
  : public stan::model::model_base_crtp<model_vclogit_l2_type1> {
private:
        int ncat;
        int K;
        int J;
        int D;
        matrix_d Y;
        matrix_d X;
        int ncatm1;
        int Q;
        vector_d ones_cats;
        vector_d ones_D;
        vector_d mean_X;
        vector_d mean_X_full;
        matrix_d X_transpose;
        matrix_d X_varying;
        matrix_d Y_transpose;
        std::vector<std::vector<int> > zeroes;
public:
    model_vclogit_l2_type1(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_vclogit_l2_type1(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_vclogit_l2_type1_namespace::model_vclogit_l2_type1";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "ncat", "int", context__.to_vec());
            ncat = int(0);
            vals_i__ = context__.vals_i("ncat");
            pos__ = 0;
            ncat = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncat", ncat, 2);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            check_greater_or_equal(function__, "D", D, 1);
            current_statement_begin__ = 24;
            validate_non_negative_index("Y", "J", J);
            validate_non_negative_index("Y", "ncat", ncat);
            context__.validate_dims("data initialization", "Y", "matrix_d", context__.to_vec(J,ncat));
            Y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, ncat);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_2_max__ = ncat;
            size_t Y_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < Y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                    Y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("X", "J", J);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(J,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 31;
            ncatm1 = int(0);
            stan::math::fill(ncatm1, std::numeric_limits<int>::min());
            stan::math::assign(ncatm1,(ncat - 1));
            current_statement_begin__ = 32;
            Q = int(0);
            stan::math::fill(Q, std::numeric_limits<int>::min());
            stan::math::assign(Q,(D * ncatm1));
            current_statement_begin__ = 33;
            validate_non_negative_index("ones_cats", "ncat", ncat);
            ones_cats = Eigen::Matrix<double, Eigen::Dynamic, 1>(ncat);
            stan::math::fill(ones_cats, DUMMY_VAR__);
            stan::math::assign(ones_cats,rep_vector(1.0, ncat));
            current_statement_begin__ = 34;
            validate_non_negative_index("ones_D", "D", D);
            ones_D = Eigen::Matrix<double, Eigen::Dynamic, 1>(D);
            stan::math::fill(ones_D, DUMMY_VAR__);
            stan::math::assign(ones_D,rep_vector(1.0, D));
            current_statement_begin__ = 35;
            validate_non_negative_index("mean_X", "(K - 1)", (K - 1));
            mean_X = Eigen::Matrix<double, Eigen::Dynamic, 1>((K - 1));
            stan::math::fill(mean_X, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("mean_X_full", "K", K);
            mean_X_full = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(mean_X_full, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("X_transpose", "K", K);
            validate_non_negative_index("X_transpose", "J", J);
            X_transpose = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, J);
            stan::math::fill(X_transpose, DUMMY_VAR__);
            stan::math::assign(X_transpose,transpose(X));
            current_statement_begin__ = 38;
            validate_non_negative_index("X_varying", "J", J);
            validate_non_negative_index("X_varying", "D", D);
            X_varying = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, D);
            stan::math::fill(X_varying, DUMMY_VAR__);
            stan::math::assign(X_varying,stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, D), stan::model::nil_index_list())), "X"));
            current_statement_begin__ = 39;
            validate_non_negative_index("Y_transpose", "ncat", ncat);
            validate_non_negative_index("Y_transpose", "J", J);
            Y_transpose = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(ncat, J);
            stan::math::fill(Y_transpose, DUMMY_VAR__);
            stan::math::assign(Y_transpose,transpose(Y));
            current_statement_begin__ = 40;
            validate_non_negative_index("zeroes", "ncat", ncat);
            validate_non_negative_index("zeroes", "J", J);
            zeroes = std::vector<std::vector<int> >(ncat, std::vector<int>(J, int(0)));
            stan::math::fill(zeroes, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 41;
            for (int c = 1; c <= ncat; ++c) {
                current_statement_begin__ = 42;
                for (int l = 1; l <= J; ++l) {
                    current_statement_begin__ = 43;
                    if (as_bool(logical_eq(get_base1(Y_transpose, c, l, "Y_transpose", 1), -(1.0)))) {
                        current_statement_begin__ = 44;
                        stan::model::assign(zeroes, 
                                    stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable zeroes");
                        current_statement_begin__ = 45;
                        stan::model::assign(Y_transpose, 
                                    stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), 
                                    0.0, 
                                    "assigning variable Y_transpose");
                    } else {
                        current_statement_begin__ = 47;
                        stan::model::assign(zeroes, 
                                    stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable zeroes");
                    }
                }
            }
            // validate transformed data
            current_statement_begin__ = 31;
            check_greater_or_equal(function__, "ncatm1", ncatm1, 1);
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "Q", Q, 2);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 54;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "ncatm1", ncatm1);
            num_params_r__ += (K * ncatm1);
            current_statement_begin__ = 55;
            validate_non_negative_index("sigma", "Q", Q);
            num_params_r__ += Q;
            current_statement_begin__ = 56;
            validate_non_negative_index("nu_raw", "Q", Q);
            validate_non_negative_index("nu_raw", "J", J);
            num_params_r__ += (Q * J);
            current_statement_begin__ = 57;
            validate_non_negative_index("L", "Q", Q);
            validate_non_negative_index("L", "Q", Q);
            num_params_r__ += ((Q * (Q - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_vclogit_l2_type1() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 54;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        validate_non_negative_index("beta", "ncatm1", ncatm1);
        context__.validate_dims("parameter initialization", "beta", "row_vector_d", context__.to_vec(ncatm1,K));
        std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > beta(ncatm1, Eigen::Matrix<double, 1, Eigen::Dynamic>(K));
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = ncatm1;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t beta_i_0_max__ = ncatm1;
        for (size_t i_0__ = 0; i_0__ < beta_i_0_max__; ++i_0__) {
            try {
                writer__.row_vector_unconstrain(beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "Q", Q);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(Q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(Q);
        size_t sigma_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("nu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_raw");
        pos__ = 0U;
        validate_non_negative_index("nu_raw", "Q", Q);
        validate_non_negative_index("nu_raw", "J", J);
        context__.validate_dims("parameter initialization", "nu_raw", "matrix_d", context__.to_vec(Q,J));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> nu_raw(Q, J);
        size_t nu_raw_j_2_max__ = J;
        size_t nu_raw_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < nu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < nu_raw_j_1_max__; ++j_1__) {
                nu_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(nu_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("L")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L");
        pos__ = 0U;
        validate_non_negative_index("L", "Q", Q);
        validate_non_negative_index("L", "Q", Q);
        context__.validate_dims("parameter initialization", "L", "matrix_d", context__.to_vec(Q,Q));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L(Q, Q);
        size_t L_j_2_max__ = Q;
        size_t L_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                L(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 54;
            std::vector<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> > beta;
            size_t beta_d_0_max__ = ncatm1;
            beta.reserve(beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta.push_back(in__.row_vector_constrain(K, lp__));
                else
                    beta.push_back(in__.row_vector_constrain(K));
            }
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, Q, lp__);
            else
                sigma = in__.vector_lb_constrain(0, Q);
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> nu_raw;
            (void) nu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_raw = in__.matrix_constrain(Q, J, lp__);
            else
                nu_raw = in__.matrix_constrain(Q, J);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L;
            (void) L;  // dummy to suppress unused var warning
            if (jacobian__)
                L = in__.cholesky_factor_corr_constrain(Q, lp__);
            else
                L = in__.cholesky_factor_corr_constrain(Q);
            // transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("nu", "J", J);
            validate_non_negative_index("nu", "Q", Q);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> nu(J, Q);
            stan::math::initialize(nu, DUMMY_VAR__);
            stan::math::fill(nu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 62;
            stan::math::assign(nu, scale_r_cor(nu_raw, sigma, L, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 61;
            size_t nu_j_1_max__ = J;
            size_t nu_j_2_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < nu_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(nu(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: nu" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable nu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 66;
            int start(0);
            (void) start;  // dummy to suppress unused var warning
            stan::math::fill(start, std::numeric_limits<int>::min());
            stan::math::assign(start,1);
            current_statement_begin__ = 67;
            int end(0);
            (void) end;  // dummy to suppress unused var warning
            stan::math::fill(end, std::numeric_limits<int>::min());
            stan::math::assign(end,D);
            current_statement_begin__ = 68;
            validate_non_negative_index("log_prob", "ncat", ncat);
            validate_non_negative_index("log_prob", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> log_prob(ncat, J);
            stan::math::initialize(log_prob, DUMMY_VAR__);
            stan::math::fill(log_prob, DUMMY_VAR__);
            current_statement_begin__ = 71;
            stan::model::assign(log_prob, 
                        stan::model::cons_list(stan::model::index_uni(ncat), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        rep_row_vector(0.0, J), 
                        "assigning variable log_prob");
            current_statement_begin__ = 72;
            for (int c = 1; c <= ncatm1; ++c) {
                current_statement_begin__ = 73;
                stan::model::assign(log_prob, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            add(multiply(get_base1(beta, c, "beta", 1), X_transpose), transpose(multiply(elt_multiply(X_varying, stan::model::rvalue(nu, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list())), "nu")), ones_D))), 
                            "assigning variable log_prob");
                current_statement_begin__ = 75;
                stan::math::assign(start, (start + D));
                current_statement_begin__ = 76;
                stan::math::assign(end, (end + D));
            }
            current_statement_begin__ = 80;
            for (int l = 1; l <= J; ++l) {
                current_statement_begin__ = 81;
                for (int c = 1; c <= ncat; ++c) {
                    current_statement_begin__ = 82;
                    if (as_bool(logical_eq(get_base1(get_base1(zeroes, c, "zeroes", 1), l, "zeroes", 2), 1))) {
                        current_statement_begin__ = 83;
                        stan::model::assign(log_prob, 
                                    stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), 
                                    -(1000.0), 
                                    "assigning variable log_prob");
                    }
                }
                current_statement_begin__ = 86;
                stan::model::assign(log_prob, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), 
                            stan::model::deep_copy(log_softmax(stan::model::rvalue(log_prob, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "log_prob"))), 
                            "assigning variable log_prob");
            }
            current_statement_begin__ = 90;
            for (int c = 1; c <= ncatm1; ++c) {
                current_statement_begin__ = 92;
                lp_accum__.add(normal_log(get_base1(beta, c, "beta", 1), 0, 2.5));
            }
            current_statement_begin__ = 95;
            lp_accum__.add(std_normal_log(to_vector(nu_raw)));
            current_statement_begin__ = 96;
            lp_accum__.add((student_t_log(sigma, 3, 0, 2.5) - (4 * student_t_ccdf_log(0, 3, 0, 2.5))));
            current_statement_begin__ = 98;
            lp_accum__.add(lkj_corr_cholesky_log(L, 2));
            current_statement_begin__ = 101;
            lp_accum__.add(sum(elt_multiply(log_prob, Y_transpose)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("nu_raw");
        names__.push_back("L");
        names__.push_back("nu");
        names__.push_back("Sigma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(ncatm1);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_vclogit_l2_type1_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> > beta;
        size_t beta_d_0_max__ = ncatm1;
        beta.reserve(beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_d_0_max__; ++d_0__) {
            beta.push_back(in__.row_vector_constrain(K));
        }
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = ncatm1;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                vars__.push_back(beta[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, Q);
        size_t sigma_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> nu_raw = in__.matrix_constrain(Q, J);
        size_t nu_raw_j_2_max__ = J;
        size_t nu_raw_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < nu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < nu_raw_j_1_max__; ++j_1__) {
                vars__.push_back(nu_raw(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L = in__.cholesky_factor_corr_constrain(Q);
        size_t L_j_2_max__ = Q;
        size_t L_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                vars__.push_back(L(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("nu", "J", J);
            validate_non_negative_index("nu", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> nu(J, Q);
            stan::math::initialize(nu, DUMMY_VAR__);
            stan::math::fill(nu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 62;
            stan::math::assign(nu, scale_r_cor(nu_raw, sigma, L, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t nu_j_2_max__ = Q;
                size_t nu_j_1_max__ = J;
                for (size_t j_2__ = 0; j_2__ < nu_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
                        vars__.push_back(nu(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 105;
            validate_non_negative_index("Sigma", "Q", Q);
            validate_non_negative_index("Sigma", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(Q, Q);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            stan::math::assign(Sigma,quad_form_diag(tcrossprod(L), sigma));
            // validate, write generated quantities
            current_statement_begin__ = 105;
            size_t Sigma_j_2_max__ = Q;
            size_t Sigma_j_1_max__ = Q;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(Sigma(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_vclogit_l2_type1";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = ncatm1;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_raw_j_2_max__ = J;
        size_t nu_raw_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < nu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < nu_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_j_2_max__ = Q;
        size_t L_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t nu_j_2_max__ = Q;
            size_t nu_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < nu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "nu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Sigma_j_2_max__ = Q;
        size_t Sigma_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        size_t beta_k_0_max__ = ncatm1;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_raw_j_2_max__ = J;
        size_t nu_raw_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < nu_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < nu_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_j_1_max__ = ((Q * (Q - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t nu_j_2_max__ = Q;
            size_t nu_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < nu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "nu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Sigma_j_2_max__ = Q;
        size_t Sigma_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_vclogit_l2_type1_namespace::model_vclogit_l2_type1 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
