// Generated by rstantools.  Do not edit by hand.

/*
    voteswitchR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    voteswitchR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with voteswitchR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_vclogit_l2_type1_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 84> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 47, column 2 to column 29)",
  " (in 'string', line 48, column 2 to column 27)",
  " (in 'string', line 49, column 2 to column 21)",
  " (in 'string', line 50, column 2 to column 28)",
  " (in 'string', line 53, column 2 to column 17)",
  " (in 'string', line 91, column 2 to column 59)",
  " (in 'string', line 54, column 2 to column 37)",
  " (in 'string', line 57, column 2 to column 16)",
  " (in 'string', line 58, column 2 to column 14)",
  " (in 'string', line 59, column 9 to column 13)",
  " (in 'string', line 59, column 15 to column 16)",
  " (in 'string', line 59, column 2 to column 27)",
  " (in 'string', line 61, column 2 to column 44)",
  " (in 'string', line 63, column 4 to line 64, column 49)",
  " (in 'string', line 65, column 6 to column 24)",
  " (in 'string', line 66, column 6 to column 20)",
  " (in 'string', line 62, column 22 to line 67, column 3)",
  " (in 'string', line 62, column 2 to line 67, column 3)",
  " (in 'string', line 72, column 8 to column 33)",
  " (in 'string', line 71, column 29 to line 73, column 7)",
  " (in 'string', line 71, column 6 to line 73, column 7)",
  " (in 'string', line 70, column 22 to line 74, column 5)",
  " (in 'string', line 70, column 4 to line 74, column 5)",
  " (in 'string', line 75, column 4 to column 47)",
  " (in 'string', line 69, column 17 to line 76, column 3)",
  " (in 'string', line 69, column 2 to line 76, column 3)",
  " (in 'string', line 80, column 4 to column 44)",
  " (in 'string', line 78, column 22 to line 81, column 3)",
  " (in 'string', line 78, column 2 to line 81, column 3)",
  " (in 'string', line 83, column 2 to column 47)",
  " (in 'string', line 84, column 2 to line 85, column 41)",
  " (in 'string', line 86, column 2 to column 42)",
  " (in 'string', line 88, column 2 to column 41)",
  " (in 'string', line 17, column 2 to column 20)",
  " (in 'string', line 18, column 2 to column 17)",
  " (in 'string', line 19, column 2 to column 17)",
  " (in 'string', line 20, column 2 to column 17)",
  " (in 'string', line 22, column 9 to column 10)",
  " (in 'string', line 22, column 12 to column 16)",
  " (in 'string', line 22, column 2 to column 20)",
  " (in 'string', line 24, column 9 to column 10)",
  " (in 'string', line 24, column 11 to column 12)",
  " (in 'string', line 24, column 2 to column 16)",
  " (in 'string', line 27, column 2 to column 33)",
  " (in 'string', line 28, column 2 to column 30)",
  " (in 'string', line 29, column 9 to column 13)",
  " (in 'string', line 29, column 2 to column 49)",
  " (in 'string', line 30, column 9 to column 10)",
  " (in 'string', line 30, column 2 to column 40)",
  " (in 'string', line 31, column 9 to column 10)",
  " (in 'string', line 31, column 11 to column 12)",
  " (in 'string', line 31, column 2 to column 31)",
  " (in 'string', line 32, column 9 to column 10)",
  " (in 'string', line 32, column 11 to column 12)",
  " (in 'string', line 32, column 2 to column 35)",
  " (in 'string', line 33, column 9 to column 13)",
  " (in 'string', line 33, column 15 to column 16)",
  " (in 'string', line 33, column 2 to column 35)",
  " (in 'string', line 34, column 13 to column 17)",
  " (in 'string', line 34, column 19 to column 20)",
  " (in 'string', line 34, column 2 to column 22)",
  " (in 'string', line 41, column 8 to column 25)",
  " (in 'string', line 40, column 13 to line 42, column 7)",
  " (in 'string', line 38, column 8 to column 25)",
  " (in 'string', line 39, column 8 to column 32)",
  " (in 'string', line 37, column 37 to line 40, column 7)",
  " (in 'string', line 37, column 6 to line 42, column 7)",
  " (in 'string', line 36, column 19 to line 43, column 5)",
  " (in 'string', line 36, column 4 to line 43, column 5)",
  " (in 'string', line 35, column 20 to line 44, column 3)",
  " (in 'string', line 35, column 2 to line 44, column 3)",
  " (in 'string', line 47, column 21 to column 27)",
  " (in 'string', line 47, column 13 to column 14)",
  " (in 'string', line 48, column 18 to column 19)",
  " (in 'string', line 49, column 9 to column 10)",
  " (in 'string', line 49, column 11 to column 12)",
  " (in 'string', line 50, column 23 to column 24)",
  " (in 'string', line 53, column 9 to column 10)",
  " (in 'string', line 53, column 11 to column 12)",
  " (in 'string', line 91, column 9 to column 10)",
  " (in 'string', line 91, column 11 to column 12)",
  " (in 'string', line 12, column 4 to column 51)",
  " (in 'string', line 10, column 52 to line 13, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,-1>
scale_r_cor(const T0__& z_arg__, const T1__& SD_arg__, const T2__& L_arg__,
            std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,-1>
scale_r_cor(const T0__& z_arg__, const T1__& SD_arg__, const T2__& L_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  const auto& SD = stan::math::to_ref(SD_arg__);
  const auto& L = stan::math::to_ref(L_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 82;
    return stan::math::transpose(
             stan::math::multiply(stan::math::diag_pre_multiply(SD, L), z));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_vclogit_l2_type1 final : public model_base_crtp<model_vclogit_l2_type1> {
private:
  int ncat;
  int K;
  int J;
  int D;
  Eigen::Matrix<double,-1,-1> Y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  int ncatm1;
  int Q;
  Eigen::Matrix<double,-1,1> ones_cats_data__;
  Eigen::Matrix<double,-1,1> ones_D_data__;
  Eigen::Matrix<double,-1,-1> X_transpose_data__;
  Eigen::Matrix<double,-1,-1> X_varying_data__;
  Eigen::Matrix<double,-1,-1> Y_transpose_data__;
  std::vector<std::vector<int>> zeroes;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ones_cats{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ones_D{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_transpose{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_varying{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Y_transpose{nullptr, 0, 0};
public:
  ~model_vclogit_l2_type1() {}
  model_vclogit_l2_type1(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_vclogit_l2_type1_namespace::model_vclogit_l2_type1";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 34;
      context__.validate_dims("data initialization", "ncat", "int",
        std::vector<size_t>{});
      ncat = std::numeric_limits<int>::min();
      current_statement__ = 34;
      ncat = context__.vals_i("ncat")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "ncat", ncat, 2);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 35;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 36;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 37;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("Y", "J", J);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Y", "ncat", ncat);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(J),
          static_cast<size_t>(ncat)});
      Y_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, ncat,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Y_data__.data(), J,
        ncat);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 40;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("X", "J", J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), J, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 43;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 43;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 43;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 44;
      ncatm1 = std::numeric_limits<int>::min();
      current_statement__ = 44;
      ncatm1 = (ncat - 1);
      current_statement__ = 45;
      Q = std::numeric_limits<int>::min();
      current_statement__ = 45;
      Q = (D * ncatm1);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("ones_cats", "ncat", ncat);
      current_statement__ = 47;
      ones_cats_data__ = Eigen::Matrix<double,-1,1>::Constant(ncat,
                           std::numeric_limits<double>::quiet_NaN());
      new (&ones_cats)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ones_cats_data__.data(), ncat);
      current_statement__ = 47;
      stan::model::assign(ones_cats, stan::math::rep_vector(1.0, ncat),
        "assigning variable ones_cats");
      current_statement__ = 48;
      stan::math::validate_non_negative_index("ones_D", "D", D);
      current_statement__ = 49;
      ones_D_data__ = Eigen::Matrix<double,-1,1>::Constant(D,
                        std::numeric_limits<double>::quiet_NaN());
      new (&ones_D)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ones_D_data__.data(), D);
      current_statement__ = 49;
      stan::model::assign(ones_D, stan::math::rep_vector(1.0, D),
        "assigning variable ones_D");
      current_statement__ = 50;
      stan::math::validate_non_negative_index("X_transpose", "K", K);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("X_transpose", "J", J);
      current_statement__ = 52;
      X_transpose_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&X_transpose)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_transpose_data__.data(), K,
        J);
      current_statement__ = 52;
      stan::model::assign(X_transpose, stan::math::transpose(X),
        "assigning variable X_transpose");
      current_statement__ = 53;
      stan::math::validate_non_negative_index("X_varying", "J", J);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("X_varying", "D", D);
      current_statement__ = 55;
      X_varying_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, D,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_varying)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_varying_data__.data(), J,
        D);
      current_statement__ = 55;
      stan::model::assign(X_varying,
        stan::model::rvalue(X, "X", stan::model::index_omni(),
          stan::model::index_min_max(1, D)), "assigning variable X_varying");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("Y_transpose", "ncat", ncat);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("Y_transpose", "J", J);
      current_statement__ = 58;
      Y_transpose_data__ = Eigen::Matrix<double,-1,-1>::Constant(ncat, J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&Y_transpose)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Y_transpose_data__.data(),
        ncat, J);
      current_statement__ = 58;
      stan::model::assign(Y_transpose, stan::math::transpose(Y),
        "assigning variable Y_transpose");
      current_statement__ = 59;
      stan::math::validate_non_negative_index("zeroes", "ncat", ncat);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("zeroes", "J", J);
      current_statement__ = 61;
      zeroes = std::vector<std::vector<int>>(ncat,
                 std::vector<int>(J, std::numeric_limits<int>::min()));
      current_statement__ = 71;
      for (int c = 1; c <= ncat; ++c) {
        current_statement__ = 69;
        for (int l = 1; l <= J; ++l) {
          current_statement__ = 67;
          if (stan::math::logical_eq(
                stan::model::rvalue(Y_transpose, "Y_transpose",
                  stan::model::index_uni(c), stan::model::index_uni(l)), -1.0)) {
            current_statement__ = 64;
            stan::model::assign(zeroes, 1, "assigning variable zeroes",
              stan::model::index_uni(c), stan::model::index_uni(l));
            current_statement__ = 65;
            stan::model::assign(Y_transpose, 0.0,
              "assigning variable Y_transpose", stan::model::index_uni(c),
              stan::model::index_uni(l));
          } else {
            current_statement__ = 62;
            stan::model::assign(zeroes, 0, "assigning variable zeroes",
              stan::model::index_uni(c), stan::model::index_uni(l));
          }
        }
      }
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "ncatm1", ncatm1, 1);
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "Q", Q, 2);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("beta", "ncatm1", ncatm1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("sigma", "Q", Q);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("nu_raw", "Q", Q);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("nu_raw", "J", J);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("L", "Q", Q);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("L", "Q", Q);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("nu", "J", J);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("nu", "Q", Q);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("Sigma", "Q", Q);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("Sigma", "Q", Q);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (ncatm1 * K) + Q + (Q * J) + ((Q * (Q - 1)) / 2);
  }
  inline std::string model_name() const final {
    return "model_vclogit_l2_type1";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_vclogit_l2_type1_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(ncatm1,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(ncatm1, K);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, Q);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, J, DUMMY_VAR__);
      current_statement__ = 3;
      nu_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Q,
                 J);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, Q, DUMMY_VAR__);
      current_statement__ = 4;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, Q);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, Q, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(nu, scale_r_cor(nu_raw, sigma, L, pstream__),
        "assigning variable nu");
      {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 8;
        start = 1;
        int end = std::numeric_limits<int>::min();
        current_statement__ = 9;
        end = D;
        current_statement__ = 10;
        stan::math::validate_non_negative_index("log_prob", "ncat", ncat);
        current_statement__ = 11;
        stan::math::validate_non_negative_index("log_prob", "J", J);
        Eigen::Matrix<local_scalar_t__,-1,-1> log_prob =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncat, J,
            DUMMY_VAR__);
        current_statement__ = 13;
        stan::model::assign(log_prob, stan::math::rep_row_vector(0.0, J),
          "assigning variable log_prob", stan::model::index_uni(ncat),
          stan::model::index_omni());
        current_statement__ = 18;
        for (int c = 1; c <= ncatm1; ++c) {
          current_statement__ = 14;
          stan::model::assign(log_prob,
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(c)),
                X_transpose),
              stan::math::transpose(
                stan::math::multiply(
                  stan::math::elt_multiply(X_varying,
                    stan::model::rvalue(nu, "nu", stan::model::index_omni(),
                      stan::model::index_min_max(start, end))), ones_D))),
            "assigning variable log_prob", stan::model::index_uni(c),
            stan::model::index_omni());
          current_statement__ = 15;
          start = (start + D);
          current_statement__ = 16;
          end = (end + D);
        }
        current_statement__ = 26;
        for (int l = 1; l <= J; ++l) {
          current_statement__ = 23;
          for (int c = 1; c <= ncat; ++c) {
            current_statement__ = 21;
            if (stan::math::logical_eq(
                  stan::model::rvalue(zeroes, "zeroes",
                    stan::model::index_uni(c), stan::model::index_uni(l)), 1)) {
              current_statement__ = 19;
              stan::model::assign(log_prob, -1000.0,
                "assigning variable log_prob", stan::model::index_uni(c),
                stan::model::index_uni(l));
            }
          }
          current_statement__ = 24;
          stan::model::assign(log_prob,
            stan::math::log_softmax(
              stan::model::deep_copy(
                stan::model::rvalue(log_prob, "log_prob",
                  stan::model::index_omni(), stan::model::index_uni(l)))),
            "assigning variable log_prob", stan::model::index_omni(),
            stan::model::index_uni(l));
        }
        current_statement__ = 29;
        for (int c = 1; c <= ncatm1; ++c) {
          current_statement__ = 27;
          lp_accum__.add(stan::math::normal_lpdf<false>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(c)), 0, 2.5));
        }
        current_statement__ = 30;
        lp_accum__.add(stan::math::std_normal_lpdf<false>(
                         stan::math::to_vector(nu_raw)));
        current_statement__ = 31;
        lp_accum__.add((stan::math::student_t_lpdf<false>(sigma, 3, 0, 2.5) -
          (4 * stan::math::student_t_lccdf(0, 3, 0, 2.5))));
        current_statement__ = 32;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<false>(L, 2));
        current_statement__ = 33;
        lp_accum__.add(stan::math::sum(
                         stan::math::elt_multiply(log_prob, Y_transpose)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_vclogit_l2_type1_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,1,-1>> beta =
        std::vector<Eigen::Matrix<double,1,-1>>(ncatm1,
          Eigen::Matrix<double,1,-1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      beta = in__.template read<
               std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(ncatm1, K);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(Q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, Q);
      Eigen::Matrix<double,-1,-1> nu_raw =
        Eigen::Matrix<double,-1,-1>::Constant(Q, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      nu_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Q,
                 J);
      Eigen::Matrix<double,-1,-1> L =
        Eigen::Matrix<double,-1,-1>::Constant(Q, Q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, Q);
      Eigen::Matrix<double,-1,-1> nu =
        Eigen::Matrix<double,-1,-1>::Constant(J, Q,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          out__.write(beta[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma);
      out__.write(nu_raw);
      out__.write(L);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      stan::model::assign(nu, scale_r_cor(nu_raw, sigma, L, pstream__),
        "assigning variable nu");
      if (emit_transformed_parameters__) {
        out__.write(nu);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(Q, Q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      stan::model::assign(Sigma,
        stan::math::quad_form_diag(stan::math::tcrossprod(L), sigma),
        "assigning variable Sigma");
      out__.write(Sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(ncatm1,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(beta, in__.read<local_scalar_t__>(),
            "assigning variable beta", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Q),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(nu_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Q, J),
        "assigning variable nu_raw");
      out__.write(nu_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, Q, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(L,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Q, Q),
        "assigning variable L");
      out__.write_free_cholesky_factor_corr(L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(ncatm1),
          static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(Q)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "nu_raw", "double",
        std::vector<size_t>{static_cast<size_t>(Q), static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "L", "double",
        std::vector<size_t>{static_cast<size_t>(Q), static_cast<size_t>(Q)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> beta =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(ncatm1,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_raw_flat__;
        current_statement__ = 3;
        nu_raw_flat__ = context__.vals_r("nu_raw");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            current_statement__ = 3;
            stan::model::assign(nu_raw, nu_raw_flat__[(pos__ - 1)],
              "assigning variable nu_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(nu_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Q, Q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 4;
        L_flat__ = context__.vals_r("L");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(L, L_flat__[(pos__ - 1)],
              "assigning variable L", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "sigma", "nu_raw", "L"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"nu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"Sigma"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    ncatm1),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(Q)},
                std::vector<size_t>{static_cast<size_t>(Q),
                  static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(Q),
                  static_cast<size_t>(Q)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(Q)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Q),
               static_cast<size_t>(Q)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
        param_names__.emplace_back(std::string() + "L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((Q * (Q - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ncatm1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Q) + "},\"block\":\"parameters\"},{\"name\":\"nu_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Q) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Q) + ",\"cols\":" + std::to_string(Q) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(Q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Q) + ",\"cols\":" + std::to_string(Q) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ncatm1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Q) + "},\"block\":\"parameters\"},{\"name\":\"nu_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Q) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((Q * (Q - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(Q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Q) + ",\"cols\":" + std::to_string(Q) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((ncatm1 * K) + Q) + (Q * J)) + (Q * Q));
    const size_t num_transformed = emit_transformed_parameters * ((J * Q));
    const size_t num_gen_quantities = emit_generated_quantities * ((Q * Q));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((ncatm1 * K) + Q) + (Q * J)) + (Q * Q));
    const size_t num_transformed = emit_transformed_parameters * ((J * Q));
    const size_t num_gen_quantities = emit_generated_quantities * ((Q * Q));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_vclogit_l2_type1_namespace::model_vclogit_l2_type1;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_vclogit_l2_type1_namespace::profiles__;
}
#endif
#endif
