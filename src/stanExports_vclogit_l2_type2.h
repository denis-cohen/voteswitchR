// Generated by rstantools.  Do not edit by hand.

/*
    voteswitchR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    voteswitchR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with voteswitchR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_vclogit_l2_type2_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 54, column 2 to column 29)",
                                                      " (in 'string', line 55, column 2 to column 27)",
                                                      " (in 'string', line 56, column 2 to column 21)",
                                                      " (in 'string', line 57, column 2 to column 28)",
                                                      " (in 'string', line 58, column 2 to column 40)",
                                                      " (in 'string', line 59, column 2 to column 44)",
                                                      " (in 'string', line 60, column 2 to column 41)",
                                                      " (in 'string', line 63, column 2 to column 17)",
                                                      " (in 'string', line 64, column 2 to column 40)",
                                                      " (in 'string', line 66, column 2 to column 37)",
                                                      " (in 'string', line 67, column 2 to column 69)",
                                                      " (in 'string', line 115, column 2 to column 59)",
                                                      " (in 'string', line 116, column 2 to column 93)",
                                                      " (in 'string', line 70, column 2 to column 16)",
                                                      " (in 'string', line 71, column 2 to column 14)",
                                                      " (in 'string', line 72, column 9 to column 13)",
                                                      " (in 'string', line 72, column 15 to column 16)",
                                                      " (in 'string', line 72, column 2 to column 27)",
                                                      " (in 'string', line 74, column 2 to column 44)",
                                                      " (in 'string', line 76, column 4 to line 77, column 49)",
                                                      " (in 'string', line 78, column 6 to column 24)",
                                                      " (in 'string', line 79, column 6 to column 20)",
                                                      " (in 'string', line 82, column 8 to column 66)",
                                                      " (in 'string', line 81, column 21 to line 83, column 7)",
                                                      " (in 'string', line 81, column 6 to line 83, column 7)",
                                                      " (in 'string', line 75, column 22 to line 85, column 3)",
                                                      " (in 'string', line 75, column 2 to line 85, column 3)",
                                                      " (in 'string', line 90, column 8 to column 33)",
                                                      " (in 'string', line 89, column 29 to line 91, column 7)",
                                                      " (in 'string', line 89, column 6 to line 91, column 7)",
                                                      " (in 'string', line 88, column 22 to line 92, column 5)",
                                                      " (in 'string', line 88, column 4 to line 92, column 5)",
                                                      " (in 'string', line 93, column 4 to column 47)",
                                                      " (in 'string', line 87, column 17 to line 94, column 3)",
                                                      " (in 'string', line 87, column 2 to line 94, column 3)",
                                                      " (in 'string', line 99, column 4 to column 44)",
                                                      " (in 'string', line 97, column 22 to line 100, column 3)",
                                                      " (in 'string', line 97, column 2 to line 100, column 3)",
                                                      " (in 'string', line 102, column 2 to column 47)",
                                                      " (in 'string', line 103, column 2 to line 104, column 41)",
                                                      " (in 'string', line 105, column 2 to column 42)",
                                                      " (in 'string', line 107, column 2 to column 55)",
                                                      " (in 'string', line 108, column 2 to line 109, column 41)",
                                                      " (in 'string', line 110, column 2 to column 50)",
                                                      " (in 'string', line 112, column 2 to column 41)",
                                                      " (in 'string', line 17, column 2 to column 20)",
                                                      " (in 'string', line 18, column 2 to column 17)",
                                                      " (in 'string', line 19, column 2 to column 17)",
                                                      " (in 'string', line 20, column 2 to column 17)",
                                                      " (in 'string', line 23, column 9 to column 10)",
                                                      " (in 'string', line 23, column 12 to column 16)",
                                                      " (in 'string', line 23, column 2 to column 20)",
                                                      " (in 'string', line 25, column 9 to column 10)",
                                                      " (in 'string', line 25, column 11 to column 12)",
                                                      " (in 'string', line 25, column 2 to column 16)",
                                                      " (in 'string', line 28, column 2 to column 27)",
                                                      " (in 'string', line 29, column 24 to column 25)",
                                                      " (in 'string', line 29, column 2 to column 27)",
                                                      " (in 'string', line 32, column 2 to column 33)",
                                                      " (in 'string', line 33, column 2 to column 30)",
                                                      " (in 'string', line 34, column 9 to column 13)",
                                                      " (in 'string', line 34, column 2 to column 49)",
                                                      " (in 'string', line 35, column 9 to column 10)",
                                                      " (in 'string', line 35, column 2 to column 40)",
                                                      " (in 'string', line 36, column 9 to column 12)",
                                                      " (in 'string', line 36, column 2 to column 21)",
                                                      " (in 'string', line 37, column 9 to column 10)",
                                                      " (in 'string', line 37, column 2 to column 24)",
                                                      " (in 'string', line 38, column 9 to column 10)",
                                                      " (in 'string', line 38, column 11 to column 12)",
                                                      " (in 'string', line 38, column 2 to column 31)",
                                                      " (in 'string', line 39, column 9 to column 10)",
                                                      " (in 'string', line 39, column 11 to column 12)",
                                                      " (in 'string', line 39, column 2 to column 35)",
                                                      " (in 'string', line 40, column 9 to column 13)",
                                                      " (in 'string', line 40, column 15 to column 16)",
                                                      " (in 'string', line 40, column 2 to column 35)",
                                                      " (in 'string', line 41, column 13 to column 17)",
                                                      " (in 'string', line 41, column 19 to column 20)",
                                                      " (in 'string', line 41, column 2 to column 22)",
                                                      " (in 'string', line 48, column 8 to column 25)",
                                                      " (in 'string', line 47, column 13 to line 49, column 7)",
                                                      " (in 'string', line 45, column 8 to column 25)",
                                                      " (in 'string', line 46, column 8 to column 32)",
                                                      " (in 'string', line 44, column 37 to line 47, column 7)",
                                                      " (in 'string', line 44, column 6 to line 49, column 7)",
                                                      " (in 'string', line 43, column 19 to line 50, column 5)",
                                                      " (in 'string', line 43, column 4 to line 50, column 5)",
                                                      " (in 'string', line 42, column 20 to line 51, column 3)",
                                                      " (in 'string', line 42, column 2 to line 51, column 3)",
                                                      " (in 'string', line 54, column 21 to column 27)",
                                                      " (in 'string', line 54, column 13 to column 14)",
                                                      " (in 'string', line 55, column 18 to column 19)",
                                                      " (in 'string', line 56, column 9 to column 10)",
                                                      " (in 'string', line 56, column 11 to column 12)",
                                                      " (in 'string', line 57, column 23 to column 24)",
                                                      " (in 'string', line 58, column 18 to column 24)",
                                                      " (in 'string', line 59, column 9 to column 15)",
                                                      " (in 'string', line 59, column 16 to column 27)",
                                                      " (in 'string', line 60, column 23 to column 29)",
                                                      " (in 'string', line 63, column 9 to column 10)",
                                                      " (in 'string', line 63, column 11 to column 12)",
                                                      " (in 'string', line 64, column 9 to column 20)",
                                                      " (in 'string', line 64, column 21 to column 27)",
                                                      " (in 'string', line 115, column 9 to column 10)",
                                                      " (in 'string', line 115, column 11 to column 12)",
                                                      " (in 'string', line 116, column 9 to column 15)",
                                                      " (in 'string', line 116, column 16 to column 22)",
                                                      " (in 'string', line 12, column 4 to column 51)",
                                                      " (in 'string', line 10, column 52 to line 13, column 3)"};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
scale_r_cor(const T0__& z_arg__, const T1__& SD_arg__, const T2__& L_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& z = to_ref(z_arg__);
  const auto& SD = to_ref(SD_arg__);
  const auto& L = to_ref(L_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 109;
    return transpose(multiply(diag_pre_multiply(SD, L), z));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct scale_r_cor_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& z, const T1__& SD, const T2__& L,
           std::ostream* pstream__)  const 
{
return scale_r_cor(z, SD, L, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_vclogit_l2_type2 final : public model_base_crtp<model_vclogit_l2_type2> {
private:
  int ncat;
  int K;
  int J;
  int D;
  Eigen::Matrix<double, -1, -1> Y;
  Eigen::Matrix<double, -1, -1> X;
  int num_parties;
  std::vector<int> party_id;
  int ncatm1;
  int Q;
  Eigen::Matrix<double, -1, 1> ones_cats;
  Eigen::Matrix<double, -1, 1> ones_D;
  Eigen::Matrix<double, -1, 1> mean_X;
  Eigen::Matrix<double, -1, 1> mean_X_full;
  Eigen::Matrix<double, -1, -1> X_transpose;
  Eigen::Matrix<double, -1, -1> X_varying;
  Eigen::Matrix<double, -1, -1> Y_transpose;
  std::vector<std::vector<int>> zeroes;
 
public:
  ~model_vclogit_l2_type2() { }
  
  inline std::string model_name() const final { return "model_vclogit_l2_type2"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_vclogit_l2_type2(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_vclogit_l2_type2_namespace::model_vclogit_l2_type2";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization","ncat","int",
          context__.to_vec());
      ncat = std::numeric_limits<int>::min();
      
      current_statement__ = 46;
      ncat = context__.vals_i("ncat")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "ncat", ncat, 2);
      current_statement__ = 47;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 50;
      validate_non_negative_index("Y", "J", J);
      current_statement__ = 51;
      validate_non_negative_index("Y", "ncat", ncat);
      current_statement__ = 52;
      context__.validate_dims("data initialization","Y","double",
          context__.to_vec(J, ncat));
      Y = Eigen::Matrix<double, -1, -1>(J, ncat);
      stan::math::fill(Y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 52;
        assign(Y_flat__, nil_index_list(), context__.vals_r("Y"),
          "assigning variable Y_flat__");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 52;
            assign(Y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Y_flat__[(pos__ - 1)], "assigning variable Y");
            current_statement__ = 52;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 53;
      validate_non_negative_index("X", "J", J);
      current_statement__ = 54;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 55;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(J, K));
      X = Eigen::Matrix<double, -1, -1>(J, K);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 55;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 55;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 55;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization","num_parties","int",
          context__.to_vec());
      num_parties = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      num_parties = context__.vals_i("num_parties")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "num_parties", num_parties, 1);
      current_statement__ = 57;
      validate_non_negative_index("party_id", "J", J);
      current_statement__ = 58;
      context__.validate_dims("data initialization","party_id","int",
          context__.to_vec(J));
      party_id = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 58;
      assign(party_id, nil_index_list(), context__.vals_i("party_id"),
        "assigning variable party_id");
      current_statement__ = 58;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 58;
        current_statement__ = 58;
        check_greater_or_equal(function__, "party_id[sym1__]",
                               party_id[(sym1__ - 1)], 1);}
      current_statement__ = 59;
      ncatm1 = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      ncatm1 = (ncat - 1);
      current_statement__ = 60;
      Q = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      Q = (D * ncatm1);
      current_statement__ = 61;
      validate_non_negative_index("ones_cats", "ncat", ncat);
      current_statement__ = 62;
      ones_cats = Eigen::Matrix<double, -1, 1>(ncat);
      stan::math::fill(ones_cats, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 62;
      assign(ones_cats, nil_index_list(), rep_vector(1.0, ncat),
        "assigning variable ones_cats");
      current_statement__ = 63;
      validate_non_negative_index("ones_D", "D", D);
      current_statement__ = 64;
      ones_D = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(ones_D, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 64;
      assign(ones_D, nil_index_list(), rep_vector(1.0, D),
        "assigning variable ones_D");
      current_statement__ = 65;
      validate_non_negative_index("mean_X", "K - 1", (K - 1));
      current_statement__ = 66;
      mean_X = Eigen::Matrix<double, -1, 1>((K - 1));
      stan::math::fill(mean_X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 67;
      validate_non_negative_index("mean_X_full", "K", K);
      current_statement__ = 68;
      mean_X_full = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(mean_X_full, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      validate_non_negative_index("X_transpose", "K", K);
      current_statement__ = 70;
      validate_non_negative_index("X_transpose", "J", J);
      current_statement__ = 71;
      X_transpose = Eigen::Matrix<double, -1, -1>(K, J);
      stan::math::fill(X_transpose, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 71;
      assign(X_transpose, nil_index_list(), transpose(X),
        "assigning variable X_transpose");
      current_statement__ = 72;
      validate_non_negative_index("X_varying", "J", J);
      current_statement__ = 73;
      validate_non_negative_index("X_varying", "D", D);
      current_statement__ = 74;
      X_varying = Eigen::Matrix<double, -1, -1>(J, D);
      stan::math::fill(X_varying, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 74;
      assign(X_varying, nil_index_list(),
        rvalue(X,
          cons_list(index_omni(),
            cons_list(index_min_max(1, D), nil_index_list())), "X"),
        "assigning variable X_varying");
      current_statement__ = 75;
      validate_non_negative_index("Y_transpose", "ncat", ncat);
      current_statement__ = 76;
      validate_non_negative_index("Y_transpose", "J", J);
      current_statement__ = 77;
      Y_transpose = Eigen::Matrix<double, -1, -1>(ncat, J);
      stan::math::fill(Y_transpose, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 77;
      assign(Y_transpose, nil_index_list(), transpose(Y),
        "assigning variable Y_transpose");
      current_statement__ = 78;
      validate_non_negative_index("zeroes", "ncat", ncat);
      current_statement__ = 79;
      validate_non_negative_index("zeroes", "J", J);
      current_statement__ = 80;
      zeroes = std::vector<std::vector<int>>(ncat, std::vector<int>(J, std::numeric_limits<int>::min()));
      
      current_statement__ = 90;
      for (int c = 1; c <= ncat; ++c) {
        current_statement__ = 88;
        for (int l = 1; l <= J; ++l) {
          current_statement__ = 86;
          if (logical_eq(
                rvalue(Y_transpose,
                  cons_list(index_uni(c),
                    cons_list(index_uni(l), nil_index_list())),
                  "Y_transpose"), -1.0)) {
            current_statement__ = 83;
            assign(zeroes,
              cons_list(index_uni(c),
                cons_list(index_uni(l), nil_index_list())), 1,
              "assigning variable zeroes");
            current_statement__ = 84;
            assign(Y_transpose,
              cons_list(index_uni(c),
                cons_list(index_uni(l), nil_index_list())), 0.0,
              "assigning variable Y_transpose");
          } else {
            current_statement__ = 81;
            assign(zeroes,
              cons_list(index_uni(c),
                cons_list(index_uni(l), nil_index_list())), 0,
              "assigning variable zeroes");
          }}}
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "ncatm1", ncatm1, 1);
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "Q", Q, 2);
      current_statement__ = 91;
      validate_non_negative_index("beta", "ncatm1", ncatm1);
      current_statement__ = 92;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 93;
      validate_non_negative_index("sigma", "Q", Q);
      current_statement__ = 94;
      validate_non_negative_index("nu_raw", "Q", Q);
      current_statement__ = 95;
      validate_non_negative_index("nu_raw", "J", J);
      current_statement__ = 96;
      validate_non_negative_index("L", "Q", Q);
      current_statement__ = 96;
      validate_non_negative_index("L", "Q", Q);
      current_statement__ = 97;
      validate_non_negative_index("sigma_parties", "ncatm1", ncatm1);
      current_statement__ = 98;
      validate_non_negative_index("nu_raw_parties", "ncatm1", ncatm1);
      current_statement__ = 99;
      validate_non_negative_index("nu_raw_parties", "num_parties",
                                  num_parties);
      current_statement__ = 100;
      validate_non_negative_index("L_parties", "ncatm1", ncatm1);
      current_statement__ = 100;
      validate_non_negative_index("L_parties", "ncatm1", ncatm1);
      current_statement__ = 101;
      validate_non_negative_index("nu", "J", J);
      current_statement__ = 102;
      validate_non_negative_index("nu", "Q", Q);
      current_statement__ = 103;
      validate_non_negative_index("nu_parties", "num_parties", num_parties);
      current_statement__ = 104;
      validate_non_negative_index("nu_parties", "ncatm1", ncatm1);
      current_statement__ = 105;
      validate_non_negative_index("Sigma", "Q", Q);
      current_statement__ = 106;
      validate_non_negative_index("Sigma", "Q", Q);
      current_statement__ = 107;
      validate_non_negative_index("Sigma_parties", "ncatm1", ncatm1);
      current_statement__ = 108;
      validate_non_negative_index("Sigma_parties", "ncatm1", ncatm1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += ncatm1 * K;
      num_params_r__ += Q;
      num_params_r__ += Q * J;
      num_params_r__ += ((Q * (Q - 1)) / 2);
      num_params_r__ += ncatm1;
      num_params_r__ += ncatm1 * num_parties;
      num_params_r__ += ((ncatm1 * (ncatm1 - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_vclogit_l2_type2_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> beta;
      beta = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(ncatm1, Eigen::Matrix<local_scalar_t__, 1, -1>(K));
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        current_statement__ = 1;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(K), "assigning variable beta");}
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(Q);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 2;
      sigma = in__.vector(Q);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> nu_raw;
      nu_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(Q, J);
      stan::math::fill(nu_raw, DUMMY_VAR__);
      
      current_statement__ = 3;
      nu_raw = in__.matrix(Q, J);
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(Q, Q);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((Q * (Q - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((Q * (Q - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, Q, lp__),
          "assigning variable L");
      } else {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, Q),
          "assigning variable L");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_parties;
      sigma_parties = Eigen::Matrix<local_scalar_t__, -1, 1>(ncatm1);
      stan::math::fill(sigma_parties, DUMMY_VAR__);
      
      current_statement__ = 5;
      sigma_parties = in__.vector(ncatm1);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(sigma_parties,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_parties[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_parties");
        } else {
          current_statement__ = 5;
          assign(sigma_parties,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_parties[(sym1__ - 1)], 0),
            "assigning variable sigma_parties");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> nu_raw_parties;
      nu_raw_parties = Eigen::Matrix<local_scalar_t__, -1, -1>(ncatm1, num_parties);
      stan::math::fill(nu_raw_parties, DUMMY_VAR__);
      
      current_statement__ = 6;
      nu_raw_parties = in__.matrix(ncatm1, num_parties);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_parties;
      L_parties = Eigen::Matrix<local_scalar_t__, -1, -1>(ncatm1, ncatm1);
      stan::math::fill(L_parties, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_parties_in__;
      L_parties_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((ncatm1 *
                                                                 (ncatm1 - 1))
                                                                / 2));
      stan::math::fill(L_parties_in__, DUMMY_VAR__);
      
      current_statement__ = 7;
      L_parties_in__ = in__.vector(((ncatm1 * (ncatm1 - 1)) / 2));
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        assign(L_parties, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_parties_in__, ncatm1, lp__),
          "assigning variable L_parties");
      } else {
        current_statement__ = 7;
        assign(L_parties, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_parties_in__, ncatm1),
          "assigning variable L_parties");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> nu;
      nu = Eigen::Matrix<local_scalar_t__, -1, -1>(J, Q);
      stan::math::fill(nu, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> nu_parties;
      nu_parties = Eigen::Matrix<local_scalar_t__, -1, -1>(num_parties, ncatm1);
      stan::math::fill(nu_parties, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(nu, nil_index_list(), scale_r_cor(nu_raw, sigma, L, pstream__),
        "assigning variable nu");
      current_statement__ = 11;
      assign(nu_parties, nil_index_list(),
        scale_r_cor(nu_raw_parties, sigma_parties, L_parties, pstream__),
        "assigning variable nu_parties");
      {
        int start;
        start = std::numeric_limits<int>::min();
        
        current_statement__ = 14;
        start = 1;
        int end;
        end = std::numeric_limits<int>::min();
        
        current_statement__ = 15;
        end = D;
        current_statement__ = 16;
        validate_non_negative_index("log_prob", "ncat", ncat);
        current_statement__ = 17;
        validate_non_negative_index("log_prob", "J", J);
        Eigen::Matrix<local_scalar_t__, -1, -1> log_prob;
        log_prob = Eigen::Matrix<local_scalar_t__, -1, -1>(ncat, J);
        stan::math::fill(log_prob, DUMMY_VAR__);
        
        current_statement__ = 19;
        assign(log_prob,
          cons_list(index_uni(ncat),
            cons_list(index_omni(), nil_index_list())),
          rep_row_vector(0.0, J), "assigning variable log_prob");
        current_statement__ = 27;
        for (int c = 1; c <= ncatm1; ++c) {
          current_statement__ = 20;
          assign(log_prob,
            cons_list(index_uni(c),
              cons_list(index_omni(), nil_index_list())),
            add(multiply(beta[(c - 1)], X_transpose),
              transpose(
                multiply(
                  elt_multiply(X_varying,
                    rvalue(nu,
                      cons_list(index_omni(),
                        cons_list(index_min_max(start, end),
                          nil_index_list())), "nu")), ones_D))),
            "assigning variable log_prob");
          current_statement__ = 21;
          start = (start + D);
          current_statement__ = 22;
          end = (end + D);
          current_statement__ = 25;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 23;
            assign(log_prob,
              cons_list(index_uni(c),
                cons_list(index_uni(j), nil_index_list())),
              (rvalue(log_prob,
                 cons_list(index_uni(c),
                   cons_list(index_uni(j), nil_index_list())), "log_prob") +
                rvalue(nu_parties,
                  cons_list(index_uni(party_id[(j - 1)]),
                    cons_list(index_uni(c), nil_index_list())), "nu_parties")),
              "assigning variable log_prob");}}
        current_statement__ = 35;
        for (int l = 1; l <= J; ++l) {
          current_statement__ = 32;
          for (int c = 1; c <= ncat; ++c) {
            current_statement__ = 30;
            if (logical_eq(zeroes[(c - 1)][(l - 1)], 1)) {
              current_statement__ = 28;
              assign(log_prob,
                cons_list(index_uni(c),
                  cons_list(index_uni(l), nil_index_list())), -1000.0,
                "assigning variable log_prob");
            } }
          current_statement__ = 33;
          assign(log_prob,
            cons_list(index_omni(),
              cons_list(index_uni(l), nil_index_list())),
            log_softmax(
              stan::model::deep_copy(
                rvalue(log_prob,
                  cons_list(index_omni(),
                    cons_list(index_uni(l), nil_index_list())), "log_prob"))),
            "assigning variable log_prob");}
        current_statement__ = 38;
        for (int c = 1; c <= ncatm1; ++c) {
          current_statement__ = 36;
          lp_accum__.add(normal_lpdf<false>(beta[(c - 1)], 0, 2.5));}
        current_statement__ = 39;
        lp_accum__.add(std_normal_lpdf<false>(to_vector(nu_raw)));
        current_statement__ = 40;
        lp_accum__.add(
          (student_t_lpdf<false>(sigma, 3, 0, 2.5) -
            (4 * student_t_lccdf(0, 3, 0, 2.5))));
        current_statement__ = 41;
        lp_accum__.add(lkj_corr_cholesky_lpdf<false>(L, 2));
        current_statement__ = 42;
        lp_accum__.add(std_normal_lpdf<false>(to_vector(nu_raw_parties)));
        current_statement__ = 43;
        lp_accum__.add(
          (student_t_lpdf<false>(sigma_parties, 3, 0, 2.5) -
            (4 * student_t_lccdf(0, 3, 0, 2.5))));
        current_statement__ = 44;
        lp_accum__.add(lkj_corr_cholesky_lpdf<false>(L_parties, 2));
        current_statement__ = 45;
        lp_accum__.add(sum(elt_multiply(log_prob, Y_transpose)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_vclogit_l2_type2_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, 1, -1>> beta;
      beta = std::vector<Eigen::Matrix<double, 1, -1>>(ncatm1, Eigen::Matrix<double, 1, -1>(K));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        current_statement__ = 1;
        assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(K), "assigning variable beta");}
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sigma = in__.vector(Q);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        current_statement__ = 2;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      Eigen::Matrix<double, -1, -1> nu_raw;
      nu_raw = Eigen::Matrix<double, -1, -1>(Q, J);
      stan::math::fill(nu_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      nu_raw = in__.matrix(Q, J);
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(Q, Q);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((Q * (Q - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((Q * (Q - 1)) / 2));
      current_statement__ = 4;
      assign(L, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_in__, Q),
        "assigning variable L");
      Eigen::Matrix<double, -1, 1> sigma_parties;
      sigma_parties = Eigen::Matrix<double, -1, 1>(ncatm1);
      stan::math::fill(sigma_parties, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      sigma_parties = in__.vector(ncatm1);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_parties, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_parties[(sym1__ - 1)], 0),
          "assigning variable sigma_parties");}
      Eigen::Matrix<double, -1, -1> nu_raw_parties;
      nu_raw_parties = Eigen::Matrix<double, -1, -1>(ncatm1, num_parties);
      stan::math::fill(nu_raw_parties, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      nu_raw_parties = in__.matrix(ncatm1, num_parties);
      Eigen::Matrix<double, -1, -1> L_parties;
      L_parties = Eigen::Matrix<double, -1, -1>(ncatm1, ncatm1);
      stan::math::fill(L_parties, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_parties_in__;
      L_parties_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((ncatm1 *
                                                                 (ncatm1 - 1))
                                                                / 2));
      stan::math::fill(L_parties_in__, DUMMY_VAR__);
      
      current_statement__ = 7;
      L_parties_in__ = in__.vector(((ncatm1 * (ncatm1 - 1)) / 2));
      current_statement__ = 7;
      assign(L_parties, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_parties_in__, ncatm1),
        "assigning variable L_parties");
      Eigen::Matrix<double, -1, -1> nu;
      nu = Eigen::Matrix<double, -1, -1>(J, Q);
      stan::math::fill(nu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> nu_parties;
      nu_parties = Eigen::Matrix<double, -1, -1>(num_parties, ncatm1);
      stan::math::fill(nu_parties, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          vars__.emplace_back(beta[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          vars__.emplace_back(
            rvalue(nu_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "nu_raw"));}
      }
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          vars__.emplace_back(
            rvalue(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        vars__.emplace_back(sigma_parties[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_parties; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          vars__.emplace_back(
            rvalue(nu_raw_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "nu_raw_parties"));}}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_parties"));
        }}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(nu, nil_index_list(), scale_r_cor(nu_raw, sigma, L, pstream__),
        "assigning variable nu");
      current_statement__ = 11;
      assign(nu_parties, nil_index_list(),
        scale_r_cor(nu_raw_parties, sigma_parties, L_parties, pstream__),
        "assigning variable nu_parties");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            vars__.emplace_back(
              rvalue(nu,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "nu"));}}
        for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= num_parties; ++sym2__) {
            vars__.emplace_back(
              rvalue(nu_parties,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "nu_parties"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(Q, Q);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(Sigma, nil_index_list(), quad_form_diag(tcrossprod(L), sigma),
        "assigning variable Sigma");
      Eigen::Matrix<double, -1, -1> Sigma_parties;
      Sigma_parties = Eigen::Matrix<double, -1, -1>(ncatm1, ncatm1);
      stan::math::fill(Sigma_parties, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(Sigma_parties, nil_index_list(),
        quad_form_diag(tcrossprod(L_parties), sigma_parties),
        "assigning variable Sigma_parties");
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Sigma"));}}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "Sigma_parties"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, 1, -1>> beta;
      beta = std::vector<Eigen::Matrix<double, 1, -1>>(ncatm1, Eigen::Matrix<double, 1, -1>(K));
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            current_statement__ = 1;
            assign(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      Eigen::Matrix<double, -1, -1> nu_raw;
      nu_raw = Eigen::Matrix<double, -1, -1>(Q, J);
      stan::math::fill(nu_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nu_raw_flat__;
        current_statement__ = 3;
        assign(nu_raw_flat__, nil_index_list(), context__.vals_r("nu_raw"),
          "assigning variable nu_raw_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            current_statement__ = 3;
            assign(nu_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              nu_raw_flat__[(pos__ - 1)], "assigning variable nu_raw");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(Q, Q);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 4;
        assign(L_flat__, nil_index_list(), context__.vals_r("L"),
          "assigning variable L_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            current_statement__ = 4;
            assign(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_flat__[(pos__ - 1)], "assigning variable L");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_free__;
      L_free__ = Eigen::Matrix<double, -1, 1>(((Q * (Q - 1)) / 2));
      stan::math::fill(L_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(L_free__, nil_index_list(), stan::math::cholesky_corr_free(L),
        "assigning variable L_free__");
      Eigen::Matrix<double, -1, 1> sigma_parties;
      sigma_parties = Eigen::Matrix<double, -1, 1>(ncatm1);
      stan::math::fill(sigma_parties, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_parties_flat__;
        current_statement__ = 5;
        assign(sigma_parties_flat__, nil_index_list(),
          context__.vals_r("sigma_parties"),
          "assigning variable sigma_parties_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
          current_statement__ = 5;
          assign(sigma_parties,
            cons_list(index_uni(sym1__), nil_index_list()),
            sigma_parties_flat__[(pos__ - 1)],
            "assigning variable sigma_parties");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_parties_free__;
      sigma_parties_free__ = Eigen::Matrix<double, -1, 1>(ncatm1);
      stan::math::fill(sigma_parties_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_parties_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_parties[(sym1__ - 1)], 0),
          "assigning variable sigma_parties_free__");}
      Eigen::Matrix<double, -1, -1> nu_raw_parties;
      nu_raw_parties = Eigen::Matrix<double, -1, -1>(ncatm1, num_parties);
      stan::math::fill(nu_raw_parties, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nu_raw_parties_flat__;
        current_statement__ = 6;
        assign(nu_raw_parties_flat__, nil_index_list(),
          context__.vals_r("nu_raw_parties"),
          "assigning variable nu_raw_parties_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= num_parties; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            current_statement__ = 6;
            assign(nu_raw_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              nu_raw_parties_flat__[(pos__ - 1)],
              "assigning variable nu_raw_parties");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> L_parties;
      L_parties = Eigen::Matrix<double, -1, -1>(ncatm1, ncatm1);
      stan::math::fill(L_parties, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_parties_flat__;
        current_statement__ = 7;
        assign(L_parties_flat__, nil_index_list(),
          context__.vals_r("L_parties"),
          "assigning variable L_parties_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            current_statement__ = 7;
            assign(L_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_parties_flat__[(pos__ - 1)], "assigning variable L_parties");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_parties_free__;
      L_parties_free__ = Eigen::Matrix<double, -1, 1>(((ncatm1 *
                                                         (ncatm1 - 1)) / 2));
      stan::math::fill(L_parties_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(L_parties_free__, nil_index_list(),
        stan::math::cholesky_corr_free(L_parties),
        "assigning variable L_parties_free__");
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(beta[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          vars__.emplace_back(
            rvalue(nu_raw,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "nu_raw"));}
      }
      for (int sym1__ = 1; sym1__ <= ((Q * (Q - 1)) / 2); ++sym1__) {
        vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        vars__.emplace_back(sigma_parties_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= num_parties; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          vars__.emplace_back(
            rvalue(nu_raw_parties,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "nu_raw_parties"));}}
      for (int sym1__ = 1; sym1__ <= ((ncatm1 * (ncatm1 - 1)) / 2); ++sym1__) {
        vars__.emplace_back(L_parties_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta");
    names__.emplace_back("sigma");
    names__.emplace_back("nu_raw");
    names__.emplace_back("L");
    names__.emplace_back("sigma_parties");
    names__.emplace_back("nu_raw_parties");
    names__.emplace_back("L_parties");
    names__.emplace_back("nu");
    names__.emplace_back("nu_parties");
    names__.emplace_back("Sigma");
    names__.emplace_back("Sigma_parties");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ncatm1),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q),
                                             static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q),
                                             static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ncatm1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ncatm1),
                                             static_cast<size_t>(num_parties)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ncatm1),
                                             static_cast<size_t>(ncatm1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J),
                                             static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(num_parties)
                                             , static_cast<size_t>(ncatm1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q),
                                             static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ncatm1),
                                             static_cast<size_t>(ncatm1)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "nu_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_parties" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_parties; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "nu_raw_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_parties; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "nu_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((Q * (Q - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_parties" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= num_parties; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "nu_raw_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= ((ncatm1 * (ncatm1 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_parties" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= num_parties; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Q; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= ncatm1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= ncatm1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_parties" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << ncatm1 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"nu_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << Q << ",\"cols\":" << J << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << Q << ",\"cols\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"sigma_parties\",\"type\":{\"name\":\"vector\",\"length\":" << ncatm1 << "},\"block\":\"parameters\"},{\"name\":\"nu_raw_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncatm1 << ",\"cols\":" << num_parties << "},\"block\":\"parameters\"},{\"name\":\"L_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncatm1 << ",\"cols\":" << ncatm1 << "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" << J << ",\"cols\":" << Q << "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_parties << ",\"cols\":" << ncatm1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << Q << ",\"cols\":" << Q << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncatm1 << ",\"cols\":" << ncatm1 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" << ncatm1 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"nu_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" << Q << ",\"cols\":" << J << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" << ((Q * (Q - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"sigma_parties\",\"type\":{\"name\":\"vector\",\"length\":" << ncatm1 << "},\"block\":\"parameters\"},{\"name\":\"nu_raw_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncatm1 << ",\"cols\":" << num_parties << "},\"block\":\"parameters\"},{\"name\":\"L_parties\",\"type\":{\"name\":\"vector\",\"length\":" << ((ncatm1 * (ncatm1 - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"matrix\",\"rows\":" << J << ",\"cols\":" << Q << "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << num_parties << ",\"cols\":" << ncatm1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << Q << ",\"cols\":" << Q << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_parties\",\"type\":{\"name\":\"matrix\",\"rows\":" << ncatm1 << ",\"cols\":" << ncatm1 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_vclogit_l2_type2_namespace::model_vclogit_l2_type2;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_vclogit_l2_type2_namespace::profiles__;
}
#endif
#endif
